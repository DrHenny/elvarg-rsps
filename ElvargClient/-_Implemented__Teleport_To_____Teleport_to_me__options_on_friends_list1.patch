Index: ElvargClient/src/main/java/com/runescape/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ElvargClient/src/main/java/com/runescape/Client.java b/ElvargClient/src/main/java/com/runescape/Client.java
--- a/ElvargClient/src/main/java/com/runescape/Client.java	(revision 97deb0ec5a32a90fc70bd662b8520cdd9c6f4502)
+++ b/ElvargClient/src/main/java/com/runescape/Client.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -1849,6 +1849,54 @@
                             }
                         }
                     }
+
+                    if (type == 12 && isFriendOrSelf(name)) {
+                        if (chatTypeView == 3 || chatTypeView == 0) {
+                            newRegularFont.drawBasicString(name + " " + message,
+                                    11, yPos + yOffset, 0x0000FF, shadow);
+                            j++;
+                            j77++;
+                        }
+                        if (type == 11 && (clanChatMode == 0)) {
+                            if (chatTypeView == 11) {
+                                newRegularFont.drawBasicString(
+                                        name + " " + message, 11,
+                                        yPos + yOffset, 0x0000FF, shadow);
+                                j++;
+                                j77++;
+                            }
+                            if (type == 12) {
+                                newRegularFont.drawBasicString(message + "",
+                                        11, yPos + yOffset, 0x0000FF, shadow);
+                                j++;
+                            }
+                        }
+                    }
+
+                    if (type == 13 && isFriendOrSelf(name)) {
+                        if (chatTypeView == 3 || chatTypeView == 0) {
+                            newRegularFont.drawBasicString(name + " " + message,
+                                    11, yPos + yOffset, 0x0000FF, shadow);
+                            j++;
+                            j77++;
+                        }
+                        if (type == 11 && (clanChatMode == 0)) {
+                            if (chatTypeView == 11) {
+                                newRegularFont.drawBasicString(
+                                        name + " " + message, 11,
+                                        yPos + yOffset, 0x0000FF, shadow);
+                                j++;
+                                j77++;
+                            }
+                            if (type == 12) {
+                                newRegularFont.drawBasicString(message + "",
+                                        11, yPos + yOffset, 0x0000FF, shadow);
+                                j++;
+                            }
+                        }
+                    }
+
+
                     if (type == 16) {
                         if (chatTypeView == 11 || chatTypeView == 0) {
 
@@ -6898,6 +6946,43 @@
                 packetSender.sendUseItemOnPlayer(anInt1284, clicked, anInt1285, anInt1283);
             }
         }
+
+        if (action == 560 || action == 559) {
+            String text = menuActionText[id];
+            int indexOf = text.indexOf("@whi@");
+            if (indexOf != -1) {
+                long usernameHash = StringUtils.encodeBase37(text.substring(indexOf + 5).trim());
+                int resultIndex = -1;
+                for (int friendIndex = 0; friendIndex < friendsCount; friendIndex++) {
+                    if (friendsListAsLongs[friendIndex] != usernameHash) {
+                        continue;
+                    }
+                    resultIndex = friendIndex;
+                    break;
+                }
+                packetSender.sendTeleportRequest(friendsListAsLongs[resultIndex], action == 560);
+            }
+            return;
+        }
+
+        if (action == 562 || action == 563) {
+            String text = menuActionText[id];
+            int pIndex = -1;
+            int indexOf = text.indexOf("@whi@");
+            if (indexOf != -1) {
+                long usernameHash = StringUtils.encodeBase37(text.substring(indexOf + 5).trim());
+                int resultIndex = -1;
+                for (int friendIndex = 0; friendIndex < friendsCount; friendIndex++) {
+                    if (friendsListAsLongs[friendIndex] != usernameHash) {
+                        continue;
+                    }
+                    pIndex = friendIndex;
+                    break;
+                }
+            }
+            packetSender.sendAcceptedTeleport(action == 562 ? 1 : 2, friendsListAsLongs[pIndex]);
+            return;
+        }
         
         if (action == 639) {
             String text = menuActionText[id];
@@ -7864,6 +7949,30 @@
                     menuActionText[menuActionRow] = "Accept challenge @whi@" + name;
                     menuActionTypes[menuActionRow] = 6;
                     menuActionRow++;
+                }
+                l++;
+            }
+            if (chatTypeView == 4 && chatType == 13 && isFriendOrSelf(name)) {
+                if (j > k1 - 14 && j <= k1) {
+                    menuActionText[menuActionRow] = "Accept Teleport Request @whi@" + name;
+                    menuActionTypes[menuActionRow] = 563;
+                    menuActionRow++;
+                }
+                l++;
+            }
+            if (chatTypeView == 4 && chatType == 12 && isFriendOrSelf(name)) {
+                if (j > k1 - 14 && j <= k1) {
+                    menuActionText[menuActionRow] = "Accept Teleport Request @whi@" + name;
+                    menuActionTypes[menuActionRow] = 562;
+                    menuActionRow++;
+                }
+                l++;
+            }
+            if (chatTypeView == 4 && chatType == 12 && isFriendOrSelf(name)) {
+                if (j > k1 - 14 && j <= k1) {
+                    menuActionText[menuActionRow] = "Accept Teleport Request @whi@" + name;
+                    menuActionTypes[menuActionRow] = 562;
+                    menuActionRow++;
                 }
                 l++;
             }
@@ -8016,6 +8125,22 @@
                     menuActionText[menuActionRow] = "Accept challenge @whi@" + chatName;
                     menuActionTypes[menuActionRow] = 6;
                     menuActionRow++;
+                }
+                l++;
+            }
+            if (chatType == 13 && isFriendOrSelf(chatName)) {
+                if (j > k1 - 14 && j <= k1) {
+                    menuActionText[menuActionRow] = "Accept Teleport Request @whi@" + chatName;
+                    menuActionTypes[menuActionRow] = 563;
+                    menuActionRow++;
+                }
+                l++;
+            }
+            if (chatType == 12 && isFriendOrSelf(chatName)) {
+                if (j > k1 - 14 && j <= k1) {
+                    menuActionText[menuActionRow] = "Accept Teleport Request @whi@" + chatName;
+                    menuActionTypes[menuActionRow] = 562;
+                    menuActionRow++;
                 }
                 l++;
             }
@@ -10458,6 +10583,12 @@
                 i -= 101;
             else
                 i--;
+            menuActionText[menuActionRow] = "Teleport To @whi@" + friendsList[i];
+            menuActionTypes[menuActionRow] = 560;
+            menuActionRow++;
+            menuActionText[menuActionRow] = "Teleport To Me @whi@" + friendsList[i];
+            menuActionTypes[menuActionRow] = 559;
+            menuActionRow++;
             menuActionText[menuActionRow] = "Remove @whi@" + friendsList[i];
             menuActionTypes[menuActionRow] = 792;
             menuActionRow++;
@@ -14645,6 +14776,30 @@
                     }
                     if (!ignored && onTutorialIsland == 0)
                         sendMessage("wishes to duel with you.", 8, name);
+                } else if (message.endsWith(":teletoreq:")) {
+                    String name = message.substring(0, message.indexOf(":"));
+                    long encodedName = StringUtils.encodeBase37(name);
+                    boolean ignored = false;
+                    for (int count = 0; count < ignoreCount; count++) {
+                        if (ignoreListAsLongs[count] != encodedName)
+                            continue;
+                        ignored = true;
+
+                    }
+                    if (!ignored && onTutorialIsland == 0)
+                        sendMessage("has requested to teleport to you. Click to accept.", 12, name);
+                } else if (message.endsWith(":teletomereq:")) {
+                    String name = message.substring(0, message.indexOf(":"));
+                    long encodedName = StringUtils.encodeBase37(name);
+                    boolean ignored = false;
+                    for (int count = 0; count < ignoreCount; count++) {
+                        if (ignoreListAsLongs[count] != encodedName)
+                            continue;
+                        ignored = true;
+
+                    }
+                    if (!ignored && onTutorialIsland == 0)
+                        sendMessage("has requested to teleport you to their location. Click to accept.", 13, name);
                 } else if (message.endsWith(":chalreq:")) {
                     String name = message.substring(0, message.indexOf(":"));
                     long encodedName = StringUtils.encodeBase37(name);
Index: ElvargClient/src/main/java/com/runescape/io/PacketSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ElvargClient/src/main/java/com/runescape/io/PacketSender.java b/ElvargClient/src/main/java/com/runescape/io/PacketSender.java
--- a/ElvargClient/src/main/java/com/runescape/io/PacketSender.java	(revision 97deb0ec5a32a90fc70bd662b8520cdd9c6f4502)
+++ b/ElvargClient/src/main/java/com/runescape/io/PacketSender.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -436,8 +436,20 @@
             buffer.writeByte(colours[l1]);
         }
     }
+
+    public void sendTeleportRequest(long username, boolean teleportToRequest) {
+        buffer.writeOpcode(190);
+        buffer.writeLong(username);
+        buffer.writeByte(teleportToRequest ? 1 : 0);
+    }
     
     public Buffer getBuffer() {
         return buffer;
     }
+
+    public void sendAcceptedTeleport(int type, long nameHash) {
+        buffer.writeOpcode(191);
+        buffer.writeByte(type);
+        buffer.writeLong(nameHash);
+    }
 }
Index: ElvargServer/src/main/java/com/elvarg/game/content/teleporting/RequestType.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/RequestType.java b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/RequestType.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/RequestType.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,11 @@
+package com.elvarg.game.content.teleporting;
+
+/**
+ * @author Ynneh | 08/12/2022 - 12:33
+ * <https://github.com/drhenny>
+ */
+public enum RequestType {
+
+    TELE_TO,
+    TELE_TO_ME
+}
Index: ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequest.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequest.java b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequest.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequest.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,25 @@
+package com.elvarg.game.content.teleporting;
+
+import com.elvarg.game.entity.impl.player.Player;
+
+/**
+ * @author Ynneh | 08/12/2022 - 12:34
+ * <https://github.com/drhenny>
+ */
+public class TeleportRequest {
+
+    public Player player;
+
+    public Player requester;
+
+    public long requestedAt;
+
+    public RequestType requestType;
+
+    public TeleportRequest(Player player, Player requester, RequestType requestType) {
+        this.player = player;
+        this.requester = requester;
+        this.requestType = requestType;
+        this.requestedAt = System.currentTimeMillis();
+    }
+}
Index: ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequestManager.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequestManager.java b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequestManager.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportRequestManager.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,89 @@
+package com.elvarg.game.content.teleporting;
+
+import com.elvarg.game.World;
+import com.elvarg.game.entity.impl.player.Player;
+import com.elvarg.game.model.dialogues.builders.impl.BankerDialogue;
+import com.elvarg.game.model.teleportation.TeleportHandler;
+import io.netty.util.internal.ConcurrentSet;
+
+import java.util.Optional;
+import java.util.Set;
+
+/**
+ * @author Ynneh | 08/12/2022 - 12:37
+ * <https://github.com/drhenny>
+ */
+public class TeleportRequestManager {
+
+    public Set<TeleportRequest> requests = new ConcurrentSet<>();
+
+    private Player player;
+
+    public TeleportRequestManager(Player player) {
+        this.player = player;
+    }
+
+    public void onAccept(Player player, Player requester, RequestType requestType) {
+
+        if (requester == null) {
+            return;
+        }
+
+        Optional<TeleportRequest> request = requests.stream().filter(r -> r.requestType.equals(requestType)).findAny();
+
+        if (request == null || !request.isPresent()) {
+            player.getPacketSender().sendMessage("This teleport request has expired.");
+            return;
+        }
+
+        TeleportRequest req = request.get();
+
+        if (req == null) {
+            return;
+        }
+        if (player.getWildernessLevel() > 0) {
+            requester.getDialogueManager().start(new TeleportWarningDialogue(player, requestType, req));
+            return;
+        }
+        if (requestType == RequestType.TELE_TO_ME) {
+            TeleportHandler.teleport(player, requester.getLocation().clone(), player.getSpellbook().getTeleportType(), false);
+        } else {
+            TeleportHandler.teleport(requester, player.getLocation().clone(), requester.getSpellbook().getTeleportType(), false);
+        }
+        requests.remove(req);
+    }
+
+
+    public void request(Player player, Player friend, boolean teleportToRequest) {
+
+        if (friend == null)
+            return;
+
+        TeleportRequest request = new TeleportRequest(player, friend, teleportToRequest ? RequestType.TELE_TO : RequestType.TELE_TO_ME);
+
+        if (friend.teleportRequestManager.requests.contains(request)) {
+            player.getPacketSender().sendMessage("You already have a "+(teleportToRequest ? "tele to" : "tele to me")+" request pending for "+friend.getUsername());
+            return;
+        }
+        friend.teleportRequestManager.requests.add(request);
+        friend.getPacketSender().sendMessage(player.getUsername()+ (teleportToRequest ? ":teletoreq:" : ":teletomereq:"));
+        player.getPacketSender().sendMessage("<col=0000ff>Sent teleport request to "+friend.getUsername()+"...");
+    }
+
+    public void remove(String name, RequestType type) {
+        /**
+         * Called when trying to accept requests from OFFLINE PLAYERS!
+         */
+        requests.stream().filter(n -> n.player.getUsername().equalsIgnoreCase(name)).filter(t -> t.requestType.equals(type)).forEach(t -> requests.remove(t));
+    }
+
+    public void afterDialogue(Player player, Player requester, RequestType requestType, TeleportRequest req) {
+        if (requestType == RequestType.TELE_TO_ME) {
+            TeleportHandler.teleport(requester, player.getLocation().clone(), requester.getSpellbook().getTeleportType(), false);
+        } else {
+            TeleportHandler.teleport(player, requester.getLocation().clone(), player.getSpellbook().getTeleportType(), false);
+        }
+        requests.remove(req);
+    }
+}
+
Index: ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportWarningDialogue.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportWarningDialogue.java b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportWarningDialogue.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/game/content/teleporting/TeleportWarningDialogue.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,38 @@
+package com.elvarg.game.content.teleporting;
+
+import com.elvarg.game.entity.impl.player.Player;
+import com.elvarg.game.model.dialogues.builders.DynamicDialogueBuilder;
+import com.elvarg.game.model.dialogues.entries.impl.OptionDialogue;
+
+/**
+ * @author Ynneh | 09/12/2022 - 12:47
+ * <https://github.com/drhenny>
+ */
+public class TeleportWarningDialogue extends DynamicDialogueBuilder {
+
+    private RequestType requestType;
+    private TeleportRequest req;
+
+    private Player requester;
+
+    public TeleportWarningDialogue(Player requester, RequestType requestType, TeleportRequest req) {
+        super();
+        this.requester = requester;
+        this.requestType = requestType;
+        this.req = req;
+    }
+
+    @Override
+    public void build(Player player) {
+        add(new OptionDialogue(0, "Teleport to Wilderness?", (option) -> {
+            switch (option) {
+                case FIRST_OPTION:
+                    player.teleportRequestManager.afterDialogue(player, requester, requestType, req);
+                    break;
+                default:
+
+                    break;
+            }
+        }, "Yes, let's go.", "No, bruv."));
+    }
+}
Index: ElvargServer/src/main/java/com/elvarg/game/entity/impl/player/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/game/entity/impl/player/Player.java b/ElvargServer/src/main/java/com/elvarg/game/entity/impl/player/Player.java
--- a/ElvargServer/src/main/java/com/elvarg/game/entity/impl/player/Player.java	(revision 97deb0ec5a32a90fc70bd662b8520cdd9c6f4502)
+++ b/ElvargServer/src/main/java/com/elvarg/game/entity/impl/player/Player.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -39,6 +39,7 @@
 import com.elvarg.game.content.skill.skillable.impl.Runecrafting.Pouch;
 import com.elvarg.game.content.skill.skillable.impl.Runecrafting.PouchContainer;
 import com.elvarg.game.content.skill.slayer.ActiveSlayerTask;
+import com.elvarg.game.content.teleporting.TeleportRequestManager;
 import com.elvarg.game.definition.ItemDefinition;
 import com.elvarg.game.definition.PlayerBotDefinition;
 import com.elvarg.game.entity.impl.Mobile;
@@ -135,6 +136,8 @@
 	private Presetable[] presets = new Presetable[Presetables.MAX_PRESETS];
 	private boolean openPresetsOnDeath = true;
 
+	public TeleportRequestManager teleportRequestManager = new TeleportRequestManager(this);
+
 	private String username;
 	private String passwordHashWithSalt;
 	private String hostAddress;
Index: ElvargServer/src/main/java/com/elvarg/net/codec/PacketDecoder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/net/codec/PacketDecoder.java b/ElvargServer/src/main/java/com/elvarg/net/codec/PacketDecoder.java
--- a/ElvargServer/src/main/java/com/elvarg/net/codec/PacketDecoder.java	(revision 97deb0ec5a32a90fc70bd662b8520cdd9c6f4502)
+++ b/ElvargServer/src/main/java/com/elvarg/net/codec/PacketDecoder.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -90,7 +90,7 @@
             0, 0, 0, 0, 5, -1, 5, 0, 0, 0, // 160
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 170
             0, 8, 0, 2, 4, 4, 5, 6, 8, 1, // 180
-            0, 0, 12, 0, 0, 0, 0, 0, 0, 0, // 190
+            9, 9, 12, 0, 0, 0, 0, 0, 0, 0, // 190
             2, 0, 0, 0, 2, 0, 0, 0, 4, 0, // 200
             4, 0, 0, 0, 9, 8, 8, 0, 10, 0, // 210
             0, 0, 3, 2, 0, 0, -1, 0, 6, 1, // 220
Index: ElvargServer/src/main/java/com/elvarg/net/packet/PacketConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/net/packet/PacketConstants.java b/ElvargServer/src/main/java/com/elvarg/net/packet/PacketConstants.java
--- a/ElvargServer/src/main/java/com/elvarg/net/packet/PacketConstants.java	(revision 97deb0ec5a32a90fc70bd662b8520cdd9c6f4502)
+++ b/ElvargServer/src/main/java/com/elvarg/net/packet/PacketConstants.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -155,5 +155,8 @@
 
 		PACKETS[TRADE_REQUEST_OPCODE] = new TradeRequestPacketListener();
 		PACKETS[CREATION_MENU_OPCODE] = new CreationMenuPacketListener();
+
+		PACKETS[190] = new TeleportRequestListener();
+		PACKETS[191] = new TeleportAcceptListener();
 	}
 }
Index: ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportAcceptListener.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportAcceptListener.java b/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportAcceptListener.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportAcceptListener.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,58 @@
+package com.elvarg.net.packet.impl;
+
+import com.elvarg.game.World;
+import com.elvarg.game.content.teleporting.RequestType;
+import com.elvarg.game.entity.impl.player.Player;
+import com.elvarg.net.packet.Packet;
+import com.elvarg.net.packet.PacketExecutor;
+import com.elvarg.util.Misc;
+
+import java.util.Optional;
+
+/**
+ * @author Ynneh | 09/12/2022 - 11:02
+ * <https://github.com/drhenny>
+ */
+public class TeleportAcceptListener implements PacketExecutor {
+
+    @Override
+    public void execute(Player player, Packet packet) {
+        int typeIndex = packet.readByte();
+
+        if (typeIndex > RequestType.values().length)
+            return;
+
+        RequestType type = RequestType.values()[typeIndex - 1];
+
+        if (type == null) {
+            return;
+        }
+
+        Long nameHash = packet.readLong();
+
+        if (nameHash == null) {
+            System.err.println("invalid namehash..");
+            return;
+        }
+
+        String name = Misc.longToString(nameHash);
+
+        if (name == null)
+            return;
+
+        Optional<Player> p = World.getPlayers().stream().filter(n -> n != null).filter(n -> n.getUsername().equalsIgnoreCase(name)).findFirst();
+
+        if (p == null || !p.isPresent()) {
+            player.teleportRequestManager.remove(name, type);
+            return;
+        }
+
+        Player requester = p.get();
+
+        if (requester == null)
+            return;
+
+        player.teleportRequestManager.onAccept(player, requester, type);
+
+    }
+}
Index: ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportRequestListener.java
===================================================================
diff --git a/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportRequestListener.java b/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportRequestListener.java
new file mode 100644
--- /dev/null	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
+++ b/ElvargServer/src/main/java/com/elvarg/net/packet/impl/TeleportRequestListener.java	(revision 0e8772dcbe1945d4bfa761ed31cd9373af04d129)
@@ -0,0 +1,60 @@
+package com.elvarg.net.packet.impl;
+
+import com.elvarg.game.World;
+import com.elvarg.game.entity.impl.player.Player;
+import com.elvarg.game.model.PlayerRelations;
+import com.elvarg.net.packet.Packet;
+import com.elvarg.net.packet.PacketExecutor;
+import com.elvarg.util.Misc;
+
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * @author Ynneh | 08/12/2022 - 11:16
+ * <https://github.com/drhenny>
+ */
+public class TeleportRequestListener implements PacketExecutor {
+
+    @Override
+    public void execute(Player player, Packet packet) {
+
+        Long usernameHash = packet.readLong();
+
+        if (usernameHash == null)
+            return;
+
+        String username = Misc.longToString(usernameHash);
+
+        if (username == null)
+            return;
+
+        Optional<Player> searchedPlayer = World.getPlayers().stream().filter(p -> p != null).filter(p -> p.getUsername().equalsIgnoreCase(username)).findFirst();
+
+        if (searchedPlayer == null) {
+            /**
+             * Null
+             */
+            System.err.println("here 1..");
+            return;
+        }
+
+        Player friend = searchedPlayer.get();
+
+        if (friend == null) {
+            /**
+             * TODO message w offline blabla
+             */
+            System.err.println("here 2..");
+            return;
+        }
+
+        boolean teleportToRequest = packet.readByte() == 1;
+
+        if (friend.getRelations().getStatus().equals(PlayerRelations.PrivateChatStatus.OFF)) {
+            /** Should only appear for the requester a.k.a player **/
+            return;
+        }
+        player.teleportRequestManager.request(player, friend, teleportToRequest);
+    }
+}
\ No newline at end of file
